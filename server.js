#!/usr/bin/env node
// Generated by CoffeeScript 1.6.2
(function() {
  var argv, code, dir, done, express, fs, httpServer, model, options, path, server, sharejs, writing, _path;

  fs = require('fs');

  path = require('path');

  express = require('express');

  sharejs = require('share');

  dir = require('node-dir');

  argv = require('optimist').usage('Usage: $0 [path]').options({
    p: {
      alias: 'port',
      describe: "Port to listen on",
      "default": 8000
    }
  }).argv;

  _path = argv._[0];

  if (_path) {
    process.chdir(path.resolve(_path));
  }

  server = express();

  options = {
    db: {
      type: "none"
    },
    sockjs: {},
    auth: function(client, action) {
      if (action.name === "submit op" && action.docName.match(/^readonly/)) {
        return action.reject();
      } else {
        return action.accept();
      }
    }
  };

  code = fs.readFileSync(__dirname + '/code.html', 'utf8');

  server.get("/edit/*", function(req, res, next) {
    return res.send(code);
  });

  server.use(express["static"](__dirname + '/static'));

  httpServer = sharejs.server.attach(server, options);

  model = server.model;

  console.log("Loading files from '" + _path + "'...");

  dir.files('.', function(err, files) {
    var doc, file, numDone, _i, _len, _results;

    if (err) {
      throw err;
    }
    numDone = 0;
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      doc = encodeURIComponent(file);
      _results.push(model.create(doc, 'text', function(err) {
        if (err) {
          throw err;
        }
        return model.applyOp(doc, {
          v: 0,
          op: [
            {
              p: 0,
              i: fs.readFileSync(file, 'utf8')
            }
          ]
        }, function(err, op) {
          if (err) {
            throw err;
          }
          console.log("Loaded", file);
          numDone++;
          if (numDone === files.length) {
            return done();
          }
        });
      }));
    }
    return _results;
  });

  writing = {};

  done = function() {
    model.on('applyOp', function(docName, opData, snapshot, oldsnapshot) {
      var alreadyWriting;

      alreadyWriting = writing[docName] != null;
      writing[docName] = snapshot;
      if (alreadyWriting) {
        return;
      }
      return setTimeout(function() {
        var fname;

        fname = decodeURIComponent(docName);
        fs.writeFile(fname, writing[docName], 'utf8', function(err) {
          if (err) {
            return console.log("Error writing", fname);
          } else {
            return console.log("Wrote", fname);
          }
        });
        return delete writing[docName];
      }, 1000);
    });
    httpServer.listen(argv.port);
    console.log("Server running on http://localhost:" + argv.port);
    return process.title = "pearjs";
  };

}).call(this);
